import org.openqa.selenium.WebDriver
import org.openqa.selenium.chrome.ChromeDriver
import org.openqa.selenium.By
import org.openqa.selenium.WebElement
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.support.ui.WebDriverWait


class JdoodleCompilerTestSuite {

   def setupSpec(){
         def driver = new ChromeDriver()
}

    def "Test Case 1: Verify the page title"() {
        given:"Inititate the driver instance and hit the URL"
               driver.navigate().to("https://www.jdoodle.com/online-java-compiler")
        when:"Check the title of the page"
               def titlePage = driver.getTitle();
        then:"Title should be Online java Compiler - j doodle"
               Assert.assertEquals("Online Java Compiler - jdoodle",titlePage);
        cleanup:"Closing the application"
               driver.close()
    }

    def "Test Case 2: Verify code compilation"() {
        given:"Initiate the driver instance and hit the URL"
                driver.navigate().to("https://www.jdoodle.com/online-java-compiler")
                def codeInput = driver.findElement(By.cssSelector("#code textarea"))
                def compileButton = driver.findElement(By.xpath("//button[contains(text(),'Execute')]"))
        when:"Enter and Compile the code"
                codeInput.sendKeys("public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }")
                compileButton.click()
                def outPutTxt = By.cssSelector("#output textarea")
                new WebDriverWait(driver, 20).until(ExpectedConditions.textToBePresentInElementLocated(outPutTxt, "Hello, World!"))
        then:"Output should be Hello World!"
                Assert.assertEquals("Hello, World!",driver.findElement(By.cssSelector("#output textarea")).getText())
        cleanup:"Closing the application"
                driver.close()
    }

def "Test Case 3: Verify error message for compilation failure"() {
        given:"Initiate the driver instance and hit the URL"
               driver.navigate().to("https://www.jdoodle.com/online-java-compiler")
               def codeInput = driver.findElement(By.cssSelector("#code textarea"))
               def compileButton = driver.findElement(By.xpath("//button[contains(text(),'Execute')]"))
        when:"Enter and Compile the code"
               codeInput.sendKeys("public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\") }")
               compileButton.click()
               def outPutTxt = By.cssSelector("#output textarea")
               new WebDriverWait(driver, 10).until(ExpectedConditions.textToBePresentInElementLocated(outPutTxt, "error"))
               def errorTextOutput = driver.findElement(By.cssSelector(#output textarea)).getText()
        then:"output should have error in the textoutput"
               Assert.assertTrue(errorTextOutput.contains("error")
        cleanup:"Closing the application"
               driver.close()
    }

    def "Test Case 4: Verify the presence of 'Run with Input' button"() {
        given:"Initiate the driver instance and hit the URL"
               driver.navigate().to("https://www.jdoodle.com/online-java-compiler")

        expect:
        driver.findElement(By.id("run-button")) != null

        cleanup:
        driver.quit()
    }

    def "Test Case 5: Verify clear button clears the code input"() {
        given:
        def driver = new ChromeDriver()
        driver.navigate().to("https://www.jdoodle.com/online-java-compiler")
        def codeInput = driver.findElement(By.id("textarea"))
        codeInput.sendKeys("System.out.println(\"Hello, World!\");")

        when:
        def clearButton = driver.findElement(By.id("clear-button"))
        clearButton.click()

        then:
        codeInput.text == ""

        cleanup:
        driver.quit()
    }

}
