import geb.navigator.Navigator
import geb.waiting.WaitTimeOutException

class HomePage extends CustomLocator{

static at = {
waitFor("slow"){$("div.text-center h1").text().contains("Compiler IDE")}
  }

static content = {

hdrToDoHomeHeader     {$("div.text-center h1")}
inputTxtAreaCode      {$("#code textarea")}
compileBtn            {$("button[contains(text(),'Execute')]")}
outputTxtAreaCode     {$("#output textarea")}
loginBtn              {$("div[contains(text(),"Login")]")}
divOutputTextTabs     {$("#splitTabsHeader")}
}

//Method for verifying the header of page

def verifyHomePageLoadedSuccessfully(){
return waitFor("slow"){this.hdrToDoHomeHeader.displayed}
}

//Method to enter code in Input area

def enteringInputValueToinputCode(String str){
waitFor("slow"){this.inputTxtAreaCode.value(str)}
}

// Method to click on compile btn

def clickOnCompileBtn(){
waitFor("slow"){this.compileBtn.click()}
}

//Method to verify value in Output text

def verifyOutputTextCode(String str){
return waitFor("slow"){outputTxtAreaCode.contains(str)}
}

//Method to verify LoginBtn has been displayed succesfully

def verifyLoginBtnIsDisplayed(){
return waitFor("slow"){this.loginBtn.first().displayed} 
}

//Method to verify all the 5 output tabs are displayed succesfully

def verifyOutputTabsDisplayedSuccessfully(String... options){
waitFor("slow"){divOutputTextTabs}
boolean flag = true
for(String str : options){
if(!divOutputTextTabs.find("button",text:contains(str)).displayed){
        flag = false
        break
}
  }
return flag
 }
}
